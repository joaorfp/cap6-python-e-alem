import cx_Oracle
import datetime
import json

def conectar_banco():
    try:
        conn = cx_Oracle.connect(
            user="system",
            password="password",
            dsn="localhost:1521/XEPDB1"
        )
        print("Conexão estabelecida com sucesso!")
        return conn
    except cx_Oracle.DatabaseError as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

def criar_tabelas():
    conn = conectar_banco()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE operacoes_colheita (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                data_operacao DATE,
                area VARCHAR2(100),
                velocidade FLOAT,
                altura_corte FLOAT,
                umidade_solo FLOAT,
                quantidade_colhida FLOAT,
                perdas_observadas FLOAT,
                PRIMARY KEY (id)
            )
        """)
        conn.commit()
        cursor.close()
        conn.close()
        print("Tabelas criadas com sucesso.")

def registrar_operacao():
    operacao = {}
    try:
        operacao['data'] = datetime.datetime.strptime(
            input("Data da operação (DD/MM/AAAA): "), "%d/%m/%Y"
        )
    except ValueError:
        print("Data em formato inválido.")
        return

    operacao['area'] = input("Identificação da área: ")
    try:
        operacao['velocidade'] = float(input("Velocidade da colhedora (km/h): "))
        operacao['altura_corte'] = float(input("Altura de corte (cm): "))
        operacao['umidade_solo'] = float(input("Umidade do solo (%): "))
        operacao['quantidade_colhida'] = float(input("Quantidade colhida (toneladas): "))
        operacao['perdas_observadas'] = float(input("Perdas observadas (%): "))
    except ValueError:
        print("Valor numérico inválido.")
        return

    conn = conectar_banco()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO operacoes_colheita (
                data_operacao, area, velocidade, altura_corte, umidade_solo, quantidade_colhida, perdas_observadas
            ) VALUES (:1, :2, :3, :4, :5, :6, :7)
        """, (
            operacao['data'], operacao['area'], operacao['velocidade'],
            operacao['altura_corte'], operacao['umidade_solo'],
            operacao['quantidade_colhida'], operacao['perdas_observadas']
        ))
        conn.commit()
        cursor.close()
        conn.close()
        print("Operação registrada com sucesso.")

def analisar_perdas():
    conn = conectar_banco()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT perdas_observadas FROM operacoes_colheita")
        perdas = cursor.fetchall()
        if perdas:
            total_perdas = sum([p[0] for p in perdas])
            media_perdas = total_perdas / len(perdas)
            print(f"Média de perdas nas operações: {media_perdas:.2f}%")
        else:
            print("Nenhuma operação registrada para análise.")
        cursor.close()
        conn.close()

def gerar_recomendacoes():
    conn = conectar_banco()
    recomendacoes = []
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT area, velocidade, altura_corte
            FROM operacoes_colheita
        """)
        operacoes = cursor.fetchall()
        for operacao in operacoes:
            area, velocidade, altura_corte = operacao
            if velocidade > 6.0:
                recomendacoes.append(
                    f"Ajustar velocidade na área {area} para abaixo de 6 km/h."
                )
            if altura_corte > 20.0:
                recomendacoes.append(
                    f"Reduzir altura de corte na área {area} para 20 cm ou menos."
                )
        cursor.close()
        conn.close()

        if recomendacoes:
            print("Recomendações:")
            for rec in recomendacoes:
                print(f"- {rec}")
        else:
            print("Nenhuma recomendação necessária.")

def salvar_dados_json(nome_arquivo):
    conn = conectar_banco()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT data_operacao, area, velocidade, altura_corte, umidade_solo,
                   quantidade_colhida, perdas_observadas
            FROM operacoes_colheita
        """)
        operacoes = cursor.fetchall()
        dados_operacoes = []
        for op in operacoes:
            operacao = {
                'data': op[0].strftime("%d/%m/%Y"),
                'area': op[1],
                'velocidade': op[2],
                'altura_corte': op[3],
                'umidade_solo': op[4],
                'quantidade_colhida': op[5],
                'perdas_observadas': op[6]
            }
            dados_operacoes.append(operacao)
        with open(nome_arquivo, 'w') as arquivo:
            json.dump(dados_operacoes, arquivo, indent=4)
        cursor.close()
        conn.close()
        print(f"Dados salvos em {nome_arquivo}")

def carregar_dados_json(nome_arquivo):
    try:
        with open(nome_arquivo, 'r') as arquivo:
            dados_operacoes = json.load(arquivo)
        conn = conectar_banco()
        if conn:
            cursor = conn.cursor()
            for operacao in dados_operacoes:
                data_operacao = datetime.datetime.strptime(operacao['data'], "%d/%m/%Y")
                cursor.execute("""
                    INSERT INTO operacoes_colheita (
                        data_operacao, area, velocidade, altura_corte, umidade_solo,
                        quantidade_colhida, perdas_observadas
                    ) VALUES (:1, :2, :3, :4, :5, :6, :7)
                """, (
                    data_operacao, operacao['area'], operacao['velocidade'],
                    operacao['altura_corte'], operacao['umidade_solo'],
                    operacao['quantidade_colhida'], operacao['perdas_observadas']
                ))
            conn.commit()
            cursor.close()
            conn.close()
            print("Dados carregados do arquivo JSON para o banco de dados.")
    except FileNotFoundError:
        print(f"Arquivo {nome_arquivo} não encontrado.")
    except json.JSONDecodeError:
        print("Erro ao decodificar o arquivo JSON.")

def menu():
    while True:
        print("\nSistema de Otimização da Colheita de Cana-de-Açúcar")
        print("1. Registrar operação de colheita")
        print("2. Analisar perdas")
        print("3. Gerar recomendações")
        print("4. Salvar dados em arquivo JSON")
        print("5. Carregar dados de arquivo JSON")
        print("6. Criar tabelas no banco de dados")
        print("0. Sair")
        opcao = input("Escolha uma opção: ")
        if opcao == '1':
            registrar_operacao()
        elif opcao == '2':
            analisar_perdas()
        elif opcao == '3':
            gerar_recomendacoes()
        elif opcao == '4':
            nome_arquivo = input("Informe o nome do arquivo JSON para salvar: ")
            salvar_dados_json(nome_arquivo)
        elif opcao == '5':
            nome_arquivo = input("Informe o nome do arquivo JSON para carregar: ")
            carregar_dados_json(nome_arquivo)
        elif opcao == '6':
            criar_tabelas()
        elif opcao == '0':
            print("Encerrando o sistema.")
            break
        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    menu()
